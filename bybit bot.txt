# Import required libraries
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from scipy.stats import pearsonr

# Function to calculate RSI
def calculate_rsi(data, window):
    delta = data.diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=window).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=window).mean()
    rs = gain / loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

# Function to calculate MACD
def calculate_macd(data, short_window, long_window, signal_window):
    short_ema = data.ewm(span=short_window, adjust=False).mean()
    long_ema = data.ewm(span=long_window, adjust=False).mean()
    macd = short_ema - long_ema
    signal_line = macd.ewm(span=signal_window, adjust=False).mean()
    return macd, signal_line

# Function to calculate MDO (Momentum-Divergence Oscillator)
def calculate_mdo(data, window_momentum, window_ma):
    momentum = data - data.shift(window_momentum)
    moving_average = data.rolling(window=window_ma).mean()
    divergence = data - moving_average
    normalized_momentum = (momentum - momentum.min()) / (momentum.max() - momentum.min())
    normalized_divergence = (divergence - divergence.min()) / (divergence.max() - divergence.min())
    mdo = normalized_momentum * normalized_divergence
    return mdo

# Function to calculate VVCI (Volatility-Volume Correlation Indicator)
def calculate_vvci(data, window_volume):
    volatility = data['high'] - data['low']
    volume_change = data['volume'] - data['volume'].shift(window_volume)
    corr_coefficient, _ = pearsonr(volatility.fillna(0), volume_change.fillna(0))
    vvci = corr_coefficient * 100
    return vvci

# Function to calculate MTEM (Multi-Timeframe Exponential Momentum)
def calculate_mtem(data, n1, n2, n3):
    momentum_short = data - data.shift(n1)
    momentum_mid = data - data.shift(n2)
    momentum_long = data - data.shift(n3)
    ema_momentum_short = momentum_short.ewm(span=n1, adjust=False).mean()
    ema_momentum_mid = momentum_mid.ewm(span=n2, adjust=False).mean()
    ema_momentum_long = momentum_long.ewm(span=n3, adjust=False).mean()
    mtem = ema_momentum_short + ema_momentum_mid + ema_momentum_long
    return mtem

# Dummy dataset, replace this with your actual dataset
# df = pd.read_csv('binance_1m_ETHUSDT_30days.csv', parse_dates=True, index_col='timestamp')
df = pd.DataFrame({
    'timestamp': pd.date_range(start='2022-01-01', periods=100, freq='D'),
    'close': np.random.rand(100),
    'high': np.random.rand(100),
    'low': np.random.rand(100),
    'volume': np.random.rand(100)
})
df.set_index('timestamp', inplace=True)

# Calculate RSI, MACD, MDO, VVCI, MTEM
df['rsi'] = calculate_rsi(df['close'], 14)
macd, signal = calculate_macd(df['close'], 12, 26, 9)
df['macd'] = macd
df['signal'] = signal
df['macd_diff'] = macd - signal
df['long_term_ma'] = df['close'].rolling(window=50).mean()
df['mdo'] = calculate_mdo(df['close'], 5, 14)
df['vvci'] = calculate_vvci(df, 5)
df['mtem'] = calculate_mtem(df['close'], 5, 14, 21)

# Drop NaN values
df = df.dropna()

# Prepare features and labels
features_to_use = ['rsi', 'macd_diff', 'long_term_ma', 'mdo', 'vvci', 'mtem']
X = df[features_to_use]
y = (df['close'].diff() > 0).astype(int)

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

# Initialize and train the model
model = RandomForestClassifier(n_estimators=100)
model.fit(X_train, y_train)

# Model evaluation
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy}")

# Initialize trading variables
capital = 10000
current_capital = capital * 10  # 10x leverage
position = 0
stop_loss = None
take_profit = None
fee_rate = 0.001  # Binance trading fee rate of 0.1%

# Initialize counters
stop_loss_hit = 0
take_profit_dipped = 0

# Trading logic
for i, row in df.iterrows():
    current_price = row['close']
    long_term_ma = row['long_term_ma']
    features = df.loc[[i]][features_to_use]
    prediction = model.predict(features)[0]

    if prediction == 1 and position == 0 and current_capital >= current_price and current_price > long_term_ma:
        position = current_price
        fee = position * 10 * fee_rate  # Calculate fee for buying
        current_capital -= (current_price * 10) + fee  # Deduct buying amount and fee
        stop_loss = current_price * 0.98
        take_profit = current_price * 1.05

    elif position > 0:
        fee = current_price * 10 * fee_rate  # Calculate fee for selling

        if current_price <= stop_loss:
            current_capital += (current_price * 10) - fee  # Add selling amount after deducting fee
            position = 0
            stop_loss_hit += 1
            stop_loss = None
            take_profit = None

        elif current_price >= take_profit:
            if current_price < position * 0.975:
                take_profit_dipped += 1
            current_capital += (current_price * 10) - fee  # Add selling amount after deducting fee
            position = 0
            stop_loss = None
            take_profit = None

        elif prediction == 0:
            current_capital += (current_price * 10) - fee  # Add selling amount after deducting fee
            position = 0
            stop_loss = None
            take_profit = None

print(f"Final Capital: {current_capital}")

